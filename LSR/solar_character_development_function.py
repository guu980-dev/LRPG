# -*- coding: utf-8 -*-
"""Solar_Character_Development_function.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IGOptbklzl4reznamrM8hkj5U20p5irS
"""

! pip3 install -qU  markdownify  langchain-upstage rank_bm25 getpass4

import os
import getpass
import warnings
warnings.filterwarnings("ignore")

UPSTAGE_API_KEY = getpass.getpass('Enter your API Key')
_ = os.environ.setdefault("UPSTAGE_API_KEY", UPSTAGE_API_KEY)

with open("/content/world_summary.txt", "r", encoding="utf-8") as file:
    world_summary = file.read()

from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_upstage import ChatUpstage

def generate_character_creation_questions(world_summary, language="korean"):
    # Initialize the ChatUpstage component
    llm = ChatUpstage()

    # Define the prompt template for generating questions
    questions_prompt_template = PromptTemplate.from_template(
        """
        Based on the following novel context, generate five simple questions that a player should answer to help create a deeply personalized character for a fantasy RPG.
        The questions should explore different aspects of a potential characterâ€™s personality, background, and capabilities.
        For users who are not used to the the story I want you to give several choices in the question

        Write five questions in {Language}
        ---
        Novel Context: {Context}
        """
    )

    # Create a chain that combines the template, the language model, and the output parser
    questions_chain = questions_prompt_template | llm | StrOutputParser()

    # Use the chain to generate questions based on the given context
    questions = questions_chain.invoke({
        "Language": language,
        "Context": world_summary
    })

    # Split the output to get individual questions and return them
    questions = questions.strip().split('\n')
    return questions

# Example usage
novel_context = world_summary
questions = generate_character_creation_questions(novel_context)
for question in questions:
    print(question)

from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_upstage import ChatUpstage

def create_character_profile(questions, language="korean"):
    # Initialize the ChatUpstage component
    llm = ChatUpstage()

    # Define the prompt template for generating character profiles
    character_creation_prompt_template = PromptTemplate.from_template(
        """
        Using the answers provided below, create a detailed character profile for a fantasy tabletop RPG.
        The character should reflect the given attributes. Please ensure to use the specified field names and format in your output consistently.

        **Output should strictly follow this format:**

        - name: [character name]
        - gender: [male/female/other]
        - age: [age range or exact age]
        - race: [character race]
        - job: [character job]
        - stamina: [1-100]
        - intelligence: [1-100]
        - combat_power: [1-100]
        - agility: [1-100]
        - background: [character background]


        **Player Answers:**
        - Name preference: {answer1}
        - Gender preference: {answer2}
        - Age range: {answer3}
        - Race and background: {answer4}
        - Job and skills: {answer5}
        ---
        Please write the output in English.
        """
    )

    # Create a chain that combines the template, the language model, and the output parser
    character_creation_chain = character_creation_prompt_template | llm | StrOutputParser()

    # Collect answers from the user
    answers = {}
    print("Please answer the following questions to build your character:")
    for i, question in enumerate(questions):
        print("\n")  # Adds a newline for better separation
        print(f"Question {i+1}: {question}")  # Display the question
        answer = input("Your answer: ")  # Prompt for the answer
        answers[f"answer{i+1}"] = answer  # Store the answer

    # Invoke the chain to generate the character description based on the collected answers and specified language
    character_description = character_creation_chain.invoke({**answers, "Language": language})

    return character_description

# Example usage
character_description = create_character_profile(questions)
print("\nYour generated character details:")
print("---------------------------------------------------------------------------------------------------------------------------")
print(character_description)

import re
import json

def parse_character_data_to_json(text):
    # Regular expressions to match each line of the character data
    fields = {
        'name': r"- name: (.*)",
        'gender': r"- gender: (.*)",
        'age': r"- age: (\d+)",
        'race': r"- race: (.*)",
        'job': r"- job: (.*)",
        'stamina': r"- stamina: (\d+)",
        'intelligence': r"- intelligence: (\d+)",
        'combat_power': r"- combat_power: (\d+)",
        'agility': r"- agility: (\d+)",
        'background': r"- background: (.*)"
    }

    character_dict = {}

    # Loop through the fields dictionary, search for matches, and populate character_dict
    for key, pattern in fields.items():
        match = re.search(pattern, text)
        if match:
            value = match.group(1)
            if key in ['age', 'stamina', 'intelligence', 'combat_power', 'agility']:
                value = int(value)  # Convert numerical values to integers
            character_dict[key] = value

    # Convert the dictionary to a JSON string
    player_profile = json.dumps(character_dict, indent=4, ensure_ascii=False)
    return player_profile

# Example usage
character_json = parse_character_data_to_json(character_description)
print(character_json)